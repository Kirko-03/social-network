{"version":3,"sources":["Forms/FormComponents.module.css","redux/profileReducer.ts","redux/dialogReducer.ts","redux/usersReducer.ts","components/Navbar/Navbar.module.scss","api/api.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Header/Header.tsx","redux/authReducer.ts","components/Header/HeaderContainer.tsx","redux/appReducer.ts","redux/redux-store.ts","Login.tsx","App.tsx","index.tsx","Forms/FuncHelper.tsx","components/preloader/preloader.tsx","validators/validators.tsx","Forms/FormComponents.tsx","components/Header/Header.module.css","RedirectHOC.tsx"],"names":["module","exports","initialState","posts","message","like","userProfile","isAuth","status","ADDPOST","SETUSERPROFILE","SETSTATUS","SETPHOTO","setStatus","type","addPostAC","NewTextPost","getUserProfile","userId","dispatch","a","usersAPI","getProfile","response","data","getStatus","profileAPI","updateStatus","resultCode","savePhoto","file","getState","auth","id","newPhoto","photos","saveProfile","profile","newProfile","wrongNetwork","messages","slice","indexOf","toLocaleLowerCase","stopSubmit","contacts","Promise","reject","profileReducer","state","action","newPost","UPDATEMESSAGE","ADDMESSAGE","dialogs","name","NewTextMessage","updateMessageAC","body","addMessageAC","dialogReducer","copyStore","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USER_COUNT","SET_LOAD_ITEM","SET_FRIENDS_TAB","SET_TOGGLE_FRIENDS","users","pageSize","totalItemsCount","currentPage","loadItem","followingInProgress","friends","follow","unfollow","friendsTab","setUsers","setCurrentPage","setTotalItemsCount","totalCount","setLoadItem","setToggleFriends","getUsers","page","items","usersReducer","updateObjectArray","followed","filter","instance","axios","create","withCredentials","baseURL","headers","get","then","deleteUser","delete","postUser","post","console","warn","put","formData","FormData","append","authAPI","getCaptcha","getAuth","login","email","password","rememberMe","captcha","logout","Navbar","darkBack","useSelector","app","className","c","darkNav","defaultNav","item","Button","to","activeClassName","activeLink","href","News","style","backgroundSize","src","alt","Music","useState","check","setCheck","checked","onClick","Settings","updateThemeAC","styleFunc","background","color","margin","Header","props","s","darkHeader","defaultHeader","header","SET_USER_DATA","GET_CAPTCHA_URL","setAuthUserData","getAuthUserData","getCaptchaUrl","captchaUrl","url","authReducer","HeaderContainer","this","React","Component","compose","connect","INITIALIZED_SUCCESS","UPDATETHEME","initialized","appReducer","reducers","combineReducers","profilePage","dialogPage","usersPage","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","minPasswordCreator","length","maxLengthCreator","LoginRedux","reduxForm","handleSubmit","error","onSubmit","createField","Input","required","border","maxWidth","_error","ProfileContainer","lazy","DialogsContainer","UsersContainer","App","initializeApp","path","render","fallback","lazyComponent","AppContainer","promise","all","SocialNetApp","ReactDOM","document","getElementById","itemId","objPropName","newObjProps","map","i","placeholder","component","validators","text","validate","Preloader","darkTheme","display","justifyContent","alignItems","width","height","field","maxValue","values","minValue","FormControl","meta","touched","children","hasError","styles","formControl","Textarea","input","restProps","mapStateToProps","withAuthRedirect","RedirectComponent"],"mappings":"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","file":"static/js/main.e7c737b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormComponents_formControl__rV7nT\",\"error\":\"FormComponents_error__2Fi1L\"};","import {ActionTypes, PostType, profilePageType} from \"./store\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {RootReduxState} from \"./redux-store\";\r\nimport {FormDataType} from \"../components/Profile/ProfileData\";\r\nimport { stopSubmit } from \"redux-form\";\r\n\r\ntype SetUserProfileAC = {\r\n    type: \"SET-USER-PROFILE\"\r\n    userProfile: UserProfileType | null\r\n}\r\n\r\nexport type UserProfileType = {\r\n    aboutMe: string,\r\n    contacts: ContactsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: string,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n }\r\nexport type ContactsType = {\r\n    facebook: string,\r\n    website: string,\r\n    vk: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    youtube: string,\r\n    github: string,\r\n    mainLink: string\r\n}\r\n\r\nlet initialState = {\r\n    posts: [{message: \"Hi\", like: 1},\r\n        {message: \"Whats up?\", like: 1},\r\n        {message: \"Learn Pituhon(((\", like: -13},\r\n        {message: \"LOSEEER\", like: 187},\r\n        {message: \"(\", like: 100}],\r\n    userProfile: null,\r\n    isAuth: false,\r\n    status: \"\",\r\n    \r\n}\r\n\r\nconst ADDPOST = \"ADD-POST\";\r\nconst SETUSERPROFILE = \"SET-USER-PROFILE\"\r\nconst SETSTATUS = \"SET-STATUS\"\r\nconst SETPHOTO = \"SET-PHOTO\"\r\n\r\nconst profileReducer = (state: profilePageType = initialState, action: ActionTypes) => {\r\n\r\n    switch (action.type) {\r\n        case ADDPOST: {\r\n            let newPost: PostType = {\r\n                message: action.NewTextPost,\r\n                like: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        }\r\n        case SETUSERPROFILE: {\r\n            return {\r\n                ...state,\r\n                userProfile: action.userProfile\r\n            }\r\n        }\r\n        case SETPHOTO:{\r\n            return{...state,profile:{...state.userProfile,photos:action.photos}}\r\n        }\r\n        case SETSTATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: SETSTATUS,\r\n        status: status\r\n    } as const\r\n}\r\nexport const setPhoto = (photos:any)=>{\r\n    return{\r\n    type:SETPHOTO,\r\n        photos:photos\r\n    } as const\r\n}\r\nexport const addPostAC = (NewTextPost: string) => {\r\n    return {\r\n        type: ADDPOST,\r\n        NewTextPost\r\n    } as const\r\n}\r\nexport const setUserProfile = (userProfile: UserProfileType | null): SetUserProfileAC => {\r\n    return {\r\n        type: SETUSERPROFILE,\r\n        userProfile: userProfile\r\n    } as const\r\n}\r\nexport const getUserProfile = (userId: number): ThunkAction<Promise<void>, RootReduxState, unknown, ActionTypes> =>\r\n    async (dispatch) => {\r\n        let response = await usersAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data))\r\n    }\r\nexport const getStatus = (userId: number): ThunkAction<Promise<void>, RootReduxState, unknown, ActionTypes> =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data))\r\n    }\r\nexport const updateStatus = (status: string): ThunkAction<Promise<void>, RootReduxState, unknown, ActionTypes> =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0)\r\n            dispatch(setStatus(status))\r\n    }\r\nexport const savePhoto = (file: string): ThunkAction<Promise<void>, RootReduxState, unknown, ActionTypes> =>\r\n    async (dispatch,getState) => {\r\n        const userId = getState().auth.id\r\n        let response = await profileAPI.newPhoto(file)\r\n        if (response.data.resultCode === 0)\r\n            dispatch(setPhoto(response.data.data.photos))\r\n        if (userId)\r\n            dispatch(getUserProfile(userId))\r\n    }\r\nexport const saveProfile = (profile:FormDataType): ThunkAction<Promise<void>, RootReduxState, unknown, ActionTypes> =>\r\n    async (dispatch,getState) => {\r\n        const userId = getState().auth.id\r\n        let response = await profileAPI.newProfile(profile)\r\n        if (response.data.resultCode === 0) {\r\n            if (userId)\r\n                dispatch(getUserProfile(userId))\r\n        }else {\r\n            let wrongNetwork = response.data.messages[0]\r\n                .slice(\r\n                    response.data.messages[0].indexOf(\">\") + 1,\r\n                    response.data.messages[0].indexOf(\")\")\r\n                )\r\n                .toLocaleLowerCase();\r\n            dispatch(\r\n                stopSubmit(\"profile\", {\r\n                    contacts: { [wrongNetwork]: response.data.messages[0] }\r\n                })\r\n            );\r\n            return Promise.reject()\r\n        }\r\n\r\n    }\r\nexport default profileReducer","import {ActionTypes, dialogsPageType} from \"./store\";\r\nconst UPDATEMESSAGE = \"UPDATE-MESSAGE\";\r\nconst ADDMESSAGE = \"ADDMESSAGE\"\r\n\r\nlet initialState =  {dialogs: [\r\n    {name: \"Kirik\", id: 1},\r\n    {name: \"Dimik\", id: 2},\r\n    {name: \"max\", id: 3},\r\n    {name: \"dima\", id: 4},\r\n    {name: \"sasha\", id: 5}\r\n],\r\n    messages: [\r\n        {id:1,message: \"hello\"},\r\n        {id:2,message: \"Whats up)\"},\r\n        {id:3,message: \"Normal?\"}\r\n    ],\r\n    NewTextMessage:\"\"}\r\n\r\nconst dialogReducer = (state:dialogsPageType=initialState,action:ActionTypes) => {\r\nswitch(action.type){\r\n    case UPDATEMESSAGE: {\r\n        let copyStore = {...state, NewTextMessage: action.body}\r\n        copyStore.NewTextMessage = action.body\r\n\r\n        return copyStore\r\n    }\r\n    case ADDMESSAGE: {\r\n        let body = state.NewTextMessage\r\n        return {\r\n            ...state,\r\n            messages: [...state.messages, {id: 6, message: body}],\r\n            NewTextMessage: \"\"\r\n        }\r\n    }\r\n    default:\r\n        return state\r\n    }\r\n\r\n}\r\n\r\nexport const updateMessageAC = (body:string) =>{\r\n    return {\r\n        type: UPDATEMESSAGE,\r\n        body:body\r\n    }as const\r\n}\r\nexport const addMessageAC = () =>{\r\n    return {\r\n        type: ADDMESSAGE,\r\n\r\n    }as const\r\n}\r\nexport default dialogReducer","import { ActionTypes } from \"./store\";\r\nimport { updateObjectArray } from \"../Forms/FuncHelper\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { RootReduxState } from \"./redux-store\";\r\nimport { usersAPI } from \"../api/api\";\r\n\r\nexport type UserPageType = {\r\n  id: number;\r\n  name: string;\r\n  followed: boolean;\r\n  photos: PhotosType;\r\n};\r\ntype PhotosType = {\r\n  small: string;\r\n  large: string;\r\n};\r\n\r\nexport type InitialStateType = {\r\n  users: Array<UserPageType>;\r\n  pageSize: number;\r\n  totalItemsCount: number;\r\n  currentPage: number;\r\n  loadItem: boolean;\r\n  followingInProgress: any[];\r\n  friends: boolean;\r\n};\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USER_COUNT = \"SET_TOTAL_USER_COUNT\";\r\nconst SET_LOAD_ITEM = \"SET_LOAD_ITEM\";\r\nconst SET_FRIENDS_TAB = \"SET_FRIENDS_TAB\";\r\nconst SET_TOGGLE_FRIENDS = \"SET_TOGGLE_FRIENDS\";\r\nconst initialState: InitialStateType = {\r\n  users: [],\r\n  pageSize:100,\r\n  totalItemsCount: 0,\r\n  currentPage: 1,\r\n  loadItem: true,\r\n  followingInProgress: [],\r\n  friends: false,\r\n};\r\n\r\nconst usersReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ActionTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      return {\r\n        ...state,\r\n        users: updateObjectArray(state.users, action.userId, \"id\", {\r\n          followed: true,\r\n        }),\r\n      };\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        users: updateObjectArray(state.users, action.userId, \"id\", {\r\n          followed: false,\r\n        }),\r\n      };\r\n    case SET_USERS:\r\n      return {\r\n        ...state,\r\n        users: [...action.users],\r\n      };\r\n    case SET_TOTAL_USER_COUNT:\r\n      return {\r\n        ...state,\r\n        totalItemsCount: action.totalCount,\r\n      };\r\n    case SET_CURRENT_PAGE:\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    case SET_LOAD_ITEM:\r\n      return {\r\n        ...state,\r\n        loadItem: action.loadItem,\r\n      };\r\n    case SET_TOGGLE_FRIENDS:\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.loadItem\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter((id) => id !== action.userId),\r\n      };\r\n    case SET_FRIENDS_TAB:\r\n      return {\r\n        ...state,\r\n        friends: action.friends,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const follow = (userId: number) => {\r\n  return {\r\n    type: FOLLOW,\r\n    userId,\r\n  } as const;\r\n};\r\nexport const unfollow = (userId: number) => {\r\n  return {\r\n    type: UNFOLLOW,\r\n    userId,\r\n  } as const;\r\n};\r\nexport const friendsTab = (friends: boolean) => {\r\n  return {\r\n    type: SET_FRIENDS_TAB,\r\n    friends,\r\n  }as const \r\n};\r\nexport const setUsers = (users: Array<UserPageType>) => {\r\n  return {\r\n    type: SET_USERS,\r\n    users,\r\n  } as const;\r\n};\r\nexport const setCurrentPage = (currentPage: number) => {\r\n  return {\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage,\r\n  } as const;\r\n};\r\n\r\nexport const setTotalItemsCount = (totalCount: number) => {\r\n  return {\r\n    type: SET_TOTAL_USER_COUNT,\r\n    totalCount,\r\n  } as const;\r\n};\r\nexport const setLoadItem = (loadItem: boolean) => {\r\n  return {\r\n    type: SET_LOAD_ITEM,\r\n    loadItem,\r\n  } as const;\r\n};\r\nexport const setToggleFriends = (loadItem: boolean, userId: number) => {\r\n  return {\r\n    type: SET_TOGGLE_FRIENDS,\r\n    loadItem,\r\n    userId,\r\n  } as const;\r\n};\r\n\r\ntype ThunkType = ThunkAction<void, RootReduxState, unknown, ActionTypes>;\r\n\r\nexport const getUsers = (page: number, pageSize: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(setLoadItem(true));\r\n    dispatch(setCurrentPage(page));\r\n     let response = await usersAPI.getUsers(page, pageSize);\r\n    dispatch(setLoadItem(false));\r\n    dispatch(setUsers(response.items));\r\n    dispatch(setTotalItemsCount(response.totalCount));\r\n  };\r\n};\r\nexport default usersReducer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"defaultNav\":\"Navbar_defaultNav__1rlk1\",\"item\":\"Navbar_item__3vUg-\",\"darkNav\":\"Navbar_darkNav__1UsPv\",\"activeLink\":\"Navbar_activeLink__Bj_c0\",\"friends\":\"Navbar_friends__n7cUU\",\"image\":\"Navbar_image__2qNM7\"};","import axios from \"axios\";\r\nimport {FormDataType} from \"../components/Profile/ProfileData\";\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0`,\r\n    headers: {\r\n        \"API-KEY\": \"6bab46ac-4e96-4e71-a9f9-0ebc29812cdd\"\r\n    }\r\n})\r\ntype UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    followed: boolean\r\n}\r\n\r\ntype GetUsersResponseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 5) {\r\n        return instance.get<GetUsersResponseType    >(`/users?count=${pageSize}&page=${currentPage}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    deleteUser(id: number) {\r\n        return instance.delete(`/follow/${id}`)\r\n    },\r\n    postUser(id: number) {\r\n        return instance.post(`/follow/${id}`, {})\r\n    },\r\n    getProfile(id: number) {\r\n        console.warn('Устаревший метод')\r\n        return profileAPI.getProfile(id)\r\n    }\r\n\r\n}\r\nexport const profileAPI = {\r\n    getProfile(id: number) {\r\n        return instance.get(`/profile/` + id)\r\n    },\r\n    getStatus(id: number) {\r\n        return instance.get(`/profile/status/` + id)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`/profile/status`, {status: status})\r\n    },\r\n    newPhoto(file: string) {\r\n        const formData = new FormData()\r\n        formData.append('image', file)\r\n        return instance.put(`/profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    newProfile(profile: FormDataType) {\r\n        return instance.put(`/profile`, profile)\r\n    }\r\n}\r\nexport const authAPI = {\r\n    getCaptcha() {\r\n        return instance.get(`/security/get-captcha-url`)\r\n    },\r\n    getAuth() {\r\n        return instance.get(`/auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean, captcha: string) {\r\n        return instance.post(`/auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete(`/auth/login`)\r\n    }\r\n}","import React from 'react';\r\nimport c from './Navbar.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { Button } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootReduxState } from '../../redux/redux-store';\r\nconst Navbar = () =>{\r\n    let darkBack = useSelector<RootReduxState>(state=>state.app.darkBack)\r\n    return(\r\n        <nav className={darkBack?c.darkNav:c.defaultNav}>\r\n        <div className={c.item}>\r\n            <Button><NavLink to=\"/profile\" activeClassName={c.activeLink}>Profile</NavLink></Button>\r\n        </div>\r\n        <div className={c.item}>\r\n            <Button><NavLink  to=\"/dialogs\" activeClassName={c.activeLink}>Messages</NavLink></Button>\r\n        </div>\r\n        <div className={c.item} >\r\n            <Button><a href=\"https://news.ru/\" >News</a></Button>\r\n        </div>\r\n        <div className={c.item}>\r\n            <Button><a href={'https://zaycev.net'}>Music</a></Button>\r\n        </div>\r\n        <div className={c.item}>\r\n     <Button><NavLink to=\"/settings\" activeClassName={c.activeLink}>Settings</NavLink></Button>\r\n        </div>\r\n          \r\n            <div className={c.item}>\r\n                <Button><NavLink to=\"/users?\" activeClassName={c.activeLink} className={c.friends}>Users</NavLink></Button>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navbar;","import React from 'react'\r\n\r\nconst News = () =>{\r\n    return(\r\n        <div style={{backgroundSize:'cover'}}>\r\n         <img  src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSgg8uhS3oRZ_ZNq-doKC5Ol3Lcna5RoZr7uQ&usqp=CAU\" alt=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React, { useState } from 'react'\r\nconst Music = () =>{\r\n   const [check,setCheck] = useState(false)\r\n    return(\r\n    <div>\r\n        Music\r\n\r\n        <input type={'checkbox'} checked={check} onClick={()=>setCheck(!check)}/>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from 'react'\r\ntype SettingsType={\r\n    updateThemeAC:(darkBack:boolean)=>void\r\n}\r\nconst Settings:React.FC<SettingsType> = ({updateThemeAC}) =>{ \r\n    function styleFunc(background:string,color:string,margin:string){\r\n        return {background:background,color:color,margin:margin}\r\n    }\r\n    \r\n    return(\r\n        <div >\r\n            <button  onClick={()=>{updateThemeAC(true)}} style={styleFunc('black','white','5px')}>Dark theme</button>    \r\n            <button onClick={()=>{updateThemeAC(false)}} style={ styleFunc('white','black','5px')}>Light theme</button>\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import { Button } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {NavLink} from 'react-router-dom';\r\nimport { RootReduxState } from '../../redux/redux-store';\r\nimport s from './Header.module.css';\r\nimport {HeaderContainerType} from \"./HeaderContainer\";\r\n\r\nconst Header = (props: HeaderContainerType) => {\r\n    let darkBack = useSelector<RootReduxState>(state=>state.app.darkBack)\r\n    return (\r\n        <header className={darkBack?s.darkHeader:s.defaultHeader}>\r\n            <img alt={'ava'} className={s.header}\r\n            src={!darkBack?'https://static.mk.ru/upload/entities/2018/11/06/articles/detailPicture/88/e3/19/b1/a24bfa5a27d628949cfed7c792c7b99f.jpg':'https://cdn.mos.cms.futurecdn.net/v4CC7FKYdM6M6yLP3tUYpm-1200-80.jpg'} />\r\n            <div className={s.login} style={{color:darkBack?'blanchedalmond':'black'}}  >\r\n                {props.isAuth ? <p>Login:{props.login}\r\n                    <NavLink to={'/dialogs'}><Button style={{color:darkBack?'blanchedalmond':'black'}}  onClick={props.logout}>Logout</Button></NavLink>\r\n                </p> : <Button><NavLink to={'/login'}>Login</NavLink></Button>\r\n                }\r\n            </div>\r\n\r\n        </header>\r\n    )\r\n}\r\nexport default Header;","import {ActionTypes} from \"./store\"\r\nimport {authAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {RootReduxState} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    id: number | null;\r\n    email: string | null;\r\n    login: string | null;\r\n    password:string|null,\r\n    isAuth: boolean\r\n    captcha:string|null\r\n}\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\"\r\nconst GET_CAPTCHA_URL='GET_CAPTCHA_URL'\r\nconst initialState: InitialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    password:null,\r\n    isAuth: false,\r\n    captcha:null\r\n}\r\n\r\nconst authReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL:\r\n            return {\r\n                ...state, ...action.data\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const setAuthUserData = (id: number | null,\r\n                                email: string | null,\r\n                                login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: {id, email, login, isAuth}\r\n    } as const\r\n}\r\nexport const getCaptchaUrlSuccess = (captcha:string|null) => {\r\n    return {\r\n        type: GET_CAPTCHA_URL,\r\n        data: {captcha}\r\n    } as const\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkAction<Promise<void>, RootReduxState, unknown, ActionTypes> => async (dispatch) => {\r\n    let response = await authAPI.getAuth()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data\r\n\r\n        dispatch(setAuthUserData(id, login, email, true))\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean,captcha:string): ThunkAction<Promise<void>, RootReduxState, unknown, ActionTypes> =>\r\n    async (dispatch) => {\r\n        let response = await authAPI.login(email, password, rememberMe,captcha)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserData())\r\n        } else  {\r\n            if(response.data.resultCode === 10){\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : \"wrong email or password\"\r\n            dispatch(stopSubmit('login', {_error: message}))\r\n        }\r\n    }\r\nexport const logout = (): ThunkAction<Promise<void>, RootReduxState, unknown, ActionTypes> =>\r\n    async (dispatch) => {\r\n        let response = await authAPI.logout()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        }\r\n    }\r\nexport const getCaptchaUrl = (): ThunkAction<Promise<void>, RootReduxState, unknown, ActionTypes> =>\r\n    async (dispatch) => {\r\n        const response = await authAPI.getCaptcha()\r\n        const captchaUrl= response.data.url\r\n         dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n        }\r\nexport default authReducer","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {RootReduxState} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    id?: number | null\r\n    email?: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n\r\n    logout: () => void\r\n\r\n}\r\nexport type HeaderContainerType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: RootReduxState) => ({isAuth: state.auth.isAuth, login: state.auth.login})\r\n\r\nexport default compose(connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootReduxState>(MapStateToProps, {logout}))(HeaderContainer)","import {ActionTypes} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {RootReduxState} from \"./redux-store\";\r\nimport {getAuthUserData} from \"./authReducer\";\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean,\r\n    darkBack:boolean\r\n}\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\"\r\nconst UPDATETHEME=\"UPDATE-THEME\"\r\nconst initialState: InitialStateType = {\r\n    initialized: false,\r\n    darkBack:false\r\n}\r\n\r\nconst appReducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n            case UPDATETHEME:{\r\n                return{\r\n                    ...state,\r\n                    darkBack:action.darkBack\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const setInitialSuccess = () => {\r\n    return {\r\n        type: INITIALIZED_SUCCESS,\r\n    } as const\r\n}\r\nexport const updateThemeAC=(darkBack:boolean)=>{\r\n    return {type:UPDATETHEME,darkBack} as const\r\n}\r\n\r\nexport const initializeApp = (): ThunkAction<Promise<void>, RootReduxState, unknown, ActionTypes> => {\r\n    return async (dispatch) => {\r\n        const promise = dispatch(getAuthUserData())\r\n        await Promise.all([promise])\r\n        dispatch(setInitialSuccess())\r\n    }\r\n}\r\n\r\nexport default appReducer","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport dialogReducer from \"./dialogReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./appReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n\r\n})\r\n\r\nexport type RootReduxState = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nlet store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\n\r\nexport default store\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {login} from \"./redux/authReducer\";\r\nimport {Input} from \"./Forms/FormComponents\";\r\nimport {maxLengthCreator, minPasswordCreator, required} from \"./validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReduxState} from \"./redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {createField} from \"./Forms/FuncHelper\";\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha:string\r\n}\r\ntype SecurityType = {\r\n    captchaUrl: string|null\r\n}\r\ntype MapStateToPropsType = {\r\n    captchaUrl: string|null\r\n    isAuth: boolean\r\n\r\n}\r\ntype MapDispatchToProps = {\r\n    login: (email: string, password: string, rememberMe: boolean,captcha:string) => void\r\n}\r\n\r\nconst password = minPasswordCreator(5)\r\nconst length = maxLengthCreator(30)\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType,SecurityType>&SecurityType> = ({handleSubmit,error,captchaUrl}) => {\r\n\r\n    return (<form onSubmit={handleSubmit}>\r\n        {createField('email', 'email', Input, [required, length], {}, '')}\r\n        {createField(\"password\", \"Password\", Input, [required, password], {type: \"password\"}, '')}\r\n        {error && <div style={{color: 'red', border: '1px red solid', maxWidth: '200px'}}>\r\n            {error}\r\n        </div>}\r\n        {createField(\"rememberMe\", \"RememberMe\", Input, [], {type: \"checkbox\"}, 'Remember login')}\r\n        {captchaUrl && <img src={captchaUrl} alt='captcha'/>}\r\n\r\n        {captchaUrl && createField(\"captcha\", \"captchaUrl\", Input, [required], [], '')}\r\n        <div>\r\n            <button>Login</button>\r\n        </div>\r\n\r\n    </form>)\r\n}\r\nexport const LoginRedux = reduxForm<FormDataType,SecurityType>({form: \"login\"})(LoginForm)\r\n\r\nconst MapStateToProps = (state: RootReduxState) => ({isAuth: state.auth.isAuth,captchaUrl:state.auth.captcha})\r\n const Login: React.FC<MapStateToPropsType & MapDispatchToProps> = (props) => {\r\n    if (props.isAuth===true) return <Redirect to={'/profile'}/>\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe,formData.captcha)\r\n    }\r\n    return (<div>\r\n        <h1>LOGIN</h1>\r\n        <LoginRedux onSubmit={onSubmit} captchaUrl={props.captchaUrl}    />\r\n    </div>)\r\n}\r\n\r\n\r\nexport default connect(MapStateToProps, {login})(Login)","import React, { lazy, Suspense } from \"react\";\r\nimport \"./App.scss\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport { BrowserRouter, HashRouter, Redirect, Route } from \"react-router-dom\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport { compose } from \"redux\";\r\nimport { connect, Provider } from \"react-redux\";\r\nimport store, { RootReduxState } from \"./redux/redux-store\";\r\nimport { initializeApp,updateThemeAC } from \"./redux/appReducer\";\r\nimport Preloader from \"./components/preloader/preloader\";\r\nimport { lazyComponent } from \"./RedirectHOC\";\r\nimport Login from \"./Login\";\r\n\r\nlet ProfileContainer = lazy(\r\n  () => import(\"./components/Profile/ProfileContainer\")\r\n);\r\nlet DialogsContainer = lazy(\r\n  () => import(\"./components/Dialogs/DialogsContainer\")\r\n);\r\nlet UsersContainer = lazy(() => import(\"./components/Users/UsersContainer\"));\r\ntype MapDispatchToPropsType = {\r\n  initializeApp: () => void;\r\n  updateThemeAC:(darkBack:boolean)=>void\r\n};\r\ntype MapStateToPropsType = {\r\n  initialized: boolean;\r\n  darkBack:boolean;\r\n};\r\ntype AppPropsType = MapDispatchToPropsType & MapStateToPropsType;\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n  }\r\n\r\n  render() {\r\n     if (!this.props.initialized) return <Preloader />;\r\n    return (\r\n      <BrowserRouter>\r\n        <div className=\"app-writer\">\r\n          <HeaderContainer />\r\n          <Navbar />\r\n          <div className={this.props.darkBack?\"app-writer-darkBody\":\"app-writer-defaultBody\"}>\r\n            <Redirect to={\"/profile\"} />\r\n            <Route\r\n              path=\"/dialogs\"\r\n              render={() => {\r\n                return (\r\n                  <Suspense fallback={<Preloader />}>\r\n                    {lazyComponent(DialogsContainer)}\r\n                  </Suspense>\r\n                );\r\n              }}\r\n            />\r\n            <Route\r\n              path=\"/profile/:userId?\"\r\n              render={() => {\r\n                return (\r\n                  <Suspense fallback={<Preloader />}>\r\n                    {lazyComponent(ProfileContainer)}\r\n                  </Suspense>\r\n                );\r\n              }}\r\n            />\r\n            <Route\r\n              path=\"/users\"\r\n              render={() => {\r\n                return (\r\n                  <Suspense fallback={<Preloader />}>\r\n                    {lazyComponent(UsersContainer)}\r\n                  </Suspense>\r\n                );\r\n              }}\r\n            />\r\n            <Route path=\"/news\" render={() => <News />} />\r\n            <Route path=\"/music\" render={() => <Music />} />\r\n            <Route path=\"/settings\" render={() => <Settings updateThemeAC={this.props.updateThemeAC}/>}/>\r\n            <Route path=\"/login\" render={() => <Login />} />\r\n          </div>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: RootReduxState) => {\r\n  return {\r\n    initialized: state.app.initialized,\r\n    darkBack:state.app.darkBack\r\n  };\r\n};\r\nlet SocialNetApp = () => (\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <AppContainer />\r\n    </Provider>\r\n  </HashRouter>\r\n);\r\nlet AppContainer = compose<React.ComponentType>(\r\n  connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootReduxState>(\r\n    mapStateToProps,\r\n    { initializeApp,updateThemeAC}\r\n  )\r\n)(App);\r\nexport default SocialNetApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport SocialNetApp from \"./App\";\r\n\r\n\r\nReactDOM.render(\r\n    <SocialNetApp/>, document.getElementById(\"root\")\r\n);\r\n\r\n","import React from \"react\";\r\nimport { Field } from \"redux-form\";\r\n\r\nexport const updateObjectArray = (items: Array<any>, itemId: number, objPropName: string, newObjProps: {}) => {\r\n    return items.map(i => {\r\n        if (i[objPropName] === itemId) {\r\n            return {...i, ...newObjProps}\r\n        }\r\n        return i\r\n    })\r\n}\r\nexport const createField = (name: string, placeholder: string,  component: Function, validators: any, props: Object, text: string) => {\r\n    return <div>\r\n        {text}\r\n        <Field name={name} placeholder={placeholder} component={component}  validate={validators}{...props} />\r\n    </div>\r\n}","import { useSelector } from \"react-redux\";\r\nimport { RootReduxState } from \"../../redux/redux-store\";\r\n\r\nlet Preloader = () => {\r\n  let darkTheme = useSelector<RootReduxState>((state) => state.app.darkBack);\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n      }}\r\n    >\r\n      {darkTheme ? (\r\n        <img\r\n          alt=\"preloader\"\r\n          src={\"https://acegif.com/wp-content/uploads/loading-4.gif\"}\r\n        />\r\n      ): (\r\n        <img\r\n          alt=\"preloader\"\r\n          src={\"https://fixiteasy.ru/bitrix/templates/supertwo.scm/css/ajax-loader.gif\"}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Preloader;\r\n","export const required = (field: string): undefined | string => {\r\n    if (field) return undefined\r\n    return 'Field is not filled'\r\n}\r\nexport const maxLengthCreator = (maxValue: number) => (values: string): string | undefined => {\r\n    if (values.length > maxValue) return `Max length ${maxValue} symbol`\r\n    return undefined\r\n}\r\nexport const minPasswordCreator = (minValue: number) => (values: string): string | undefined => {\r\n    if (values.length < minValue) return `Min length password ${minValue} symbol`\r\n    return undefined\r\n}\r\n","import React from 'react'\r\nimport {WrappedFieldProps} from \"redux-form\";\r\nimport styles from './FormComponents.module.css'\r\n\r\nconst FormControl: React.FC<WrappedFieldProps> = (props) => {\r\n    const {meta: {touched, error}, children} = props\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={hasError ? styles.formControl + \" \" + (hasError ? styles.error : \"\") : \"\"}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return (<div>\r\n        <FormControl {...props}><textarea {...input}{...restProps}/></FormControl>\r\n    </div>)\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return (<div>\r\n        <FormControl {...props}><input {...input}{...restProps}/></FormControl>\r\n    </div>)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"defaultHeader\":\"Header_defaultHeader__17t8x\",\"darkHeader\":\"Header_darkHeader__3-18V\",\"login\":\"Header_login__2tsSw\"};","import React, {Suspense} from \"react\"\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootReduxState} from \"./redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport Preloader from \"./components/preloader/preloader\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: RootReduxState) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport const withAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any> {\r\n        render() {\r\n            if (this.props.isAuth === false) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapStateToPropsType, any, {}, RootReduxState>(mapStateToProps)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\nexport const lazyComponent = (Component: any) => {\r\n    return(<Suspense fallback={<Preloader/>}>\r\n        <Component />\r\n    </Suspense>)\r\n}\r\n"],"sourceRoot":""}