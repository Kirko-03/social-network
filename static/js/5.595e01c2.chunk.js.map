{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Dialogs","props","dialogPage","dialogsPage","NewTextMessage","isAuth","className","s","dialogs","dialogsItems","map","d","name","message","placeholder","value","onChange","e","body","target","newTextChangeHandler","Button","color","style","background","onClick","addMessage","textAlign","listStyle","fontFamily","fontSize","messages","m","to","compose","withAuthRedirect","connect","state","auth","dispatch","addMessageAC","updateMessageAC"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,0B,sGCgDhKC,EAlCC,SAACC,GACb,IAAIC,EAAaD,EAAME,YACnBC,EAAiBF,EAAWE,eAUhC,OAAKH,EAAMI,OAGP,sBAAKC,UAAWC,IAAEC,QAAlB,UACI,qBAAKF,UAAWC,IAAEE,aAAlB,SACKP,EAAWM,QAAQE,KAAI,SAAAC,GAAC,OAAI,6BAAKA,EAAEC,YAExC,sBAAKN,UAAWC,IAAEM,QAAlB,UACI,0BAAUC,YAAa,qGAAsBC,MAAOX,EAC1CY,SAfO,SAACC,GAC1B,IAAIC,EAAOD,EAAEE,OAAOJ,MACpBd,EAAMmB,qBAAqBF,MAcnB,cAACG,EAAA,EAAD,CAAQC,MAAO,UAAWC,MAAO,CAACC,WAAW,SAAUC,QAnBlD,WACbxB,EAAMyB,cAkBE,sBACA,qBAAKH,MAAO,CAACI,UAAW,OAAQC,UAAW,OAAQC,WAAY,YAAaC,SAAU,QAAtF,SAEQ5B,EAAW6B,SAASrB,KAAI,SAAAsB,GAAC,OAAI,6BAAKA,EAAEnB,qBAb9B,cAAC,IAAD,CAAUoB,GAAI,Y,uBCazBC,sBAAQC,IAAiBC,aApBtB,SAACC,GACnB,MAAM,CACNlC,YAAakC,EAAMnC,WACfG,OAAOgC,EAAMC,KAAKjC,WAIG,SAACkC,GACtB,MAAO,CACHb,WAAY,WACRa,EAASC,gBAEbpB,qBAAqB,SAACF,GACnBqB,EAASE,YAAgBvB,SAOrBgB,CAAoIlC","file":"static/js/5.595e01c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1aaFr\",\"message\":\"Dialogs_message__2CARQ\",\"dialogsItems\":\"Dialogs_dialogsItems__3IrVG\",\"active\":\"Dialogs_active__2k16i\",\"dialog\":\"Dialogs_dialog__18mmB\"};","import React, {ChangeEvent} from 'react'\r\nimport s from './Dialogs.module.css'\r\n\r\nimport {dialogsPageType} from \"../../redux/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport { Button } from '@material-ui/core';\r\n\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: dialogsPageType\r\n    addMessage: () => void\r\n    newTextChangeHandler: (body: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    let dialogPage = props.dialogsPage\r\n    let NewTextMessage = dialogPage.NewTextMessage\r\n    let addMessage = () => {\r\n        props.addMessage()\r\n    }\r\n    const newTextChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value\r\n        props.newTextChangeHandler(body)\r\n    }\r\n\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>\r\n    return (\r\n\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogPage.dialogs.map(d => <li>{d.name}</li>)}\r\n            </div>\r\n            <div className={s.message}>\r\n                <textarea placeholder={\"Введите что-нибудь\"} value={NewTextMessage}\r\n                          onChange={newTextChangeHandler}/>\r\n                <Button color={'primary'} style={{background:'white'}} onClick={addMessage}>new post</Button>\r\n                <div style={{textAlign: \"left\", listStyle: 'none', fontFamily: 'Helvetica', fontSize: '18px'}}>\r\n                    {\r\n                        dialogPage.messages.map(m => <li>{m.message}</li>)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n","import React from 'react'\r\nimport {addMessageAC, updateMessageAC} from \"../../redux/dialogReducer\";\r\n\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReduxState} from \"../../redux/redux-store\";\r\nimport {dialogsPageType} from \"../../redux/store\";\r\nimport {withAuthRedirect} from \"../../RedirectHOC\";\r\nimport { compose } from 'redux';\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage:dialogsPageType\r\n    isAuth:boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addMessage: () => void\r\n    newTextChangeHandler:(body:string) => void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state:RootReduxState):mapStateToPropsType=>{\r\n    return{\r\n    dialogsPage: state.dialogPage,\r\n        isAuth:state.auth.isAuth\r\n}\r\n    }\r\n\r\n    let mapDispatchToProps = (dispatch:any):mapDispatchToPropsType => {\r\n        return {\r\n            addMessage: () => {\r\n                dispatch(addMessageAC())\r\n            },\r\n            newTextChangeHandler:(body:string) =>{\r\n               dispatch(updateMessageAC(body))\r\n                }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    export default compose(withAuthRedirect,connect<mapStateToPropsType,mapDispatchToPropsType,{},RootReduxState>(mapStateToProps,mapDispatchToProps))(Dialogs)"],"sourceRoot":""}