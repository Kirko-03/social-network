{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Dialogs","props","dialogPage","dialogsPage","NewTextMessage","isAuth","className","s","dialogs","dialogsItems","map","d","name","message","placeholder","value","onChange","e","body","target","newTextChangeHandler","Button","color","style","background","onClick","addMessage","messages","m","to","compose","withAuthRedirect","connect","state","auth","dispatch","addMessageAC","updateMessageAC"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,0B,sGCgD/HC,EAlCC,SAACC,GACb,IAAIC,EAAaD,EAAME,YACnBC,EAAiBF,EAAWE,eAUhC,OAAKH,EAAMI,OAGP,sBAAKC,UAAWC,IAAEC,QAAlB,UACI,qBAAKF,UAAWC,IAAEE,aAAlB,SACKP,EAAWM,QAAQE,KAAI,SAAAC,GAAC,OAAI,8BAAMA,EAAEC,YAEzC,sBAAKN,UAAWC,IAAEM,QAAlB,UACI,0BAAUC,YAAa,iBAAkBC,MAAOX,EACtCY,SAfO,SAACC,GAC1B,IAAIC,EAAOD,EAAEE,OAAOJ,MACpBd,EAAMmB,qBAAqBF,MAcnB,cAACG,EAAA,EAAD,CAAQC,MAAO,UAAWC,MAAO,CAACC,WAAW,SAAUC,QAnBlD,WACbxB,EAAMyB,cAkBE,sBACA,8BAEQxB,EAAWyB,SAASjB,KAAI,SAAAkB,GAAC,OAAI,6BAAKA,EAAEf,qBAb9B,cAAC,IAAD,CAAUgB,GAAI,Y,uBCY7BC,sBAAQC,IAAkBC,aAnBnB,SAACC,GACnB,MAAO,CACH9B,YAAa8B,EAAM/B,WACnBG,OAAQ4B,EAAMC,KAAK7B,WAIF,SAAC8B,GACtB,MAAO,CACHT,WAAY,WACRS,EAASC,gBAEbhB,qBAAsB,SAACF,GACnBiB,EAASE,YAAgBnB,SAMtBY,CAAyI9B","file":"static/js/5.8c76260c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Tqvc\",\"message\":\"Dialogs_message__1rATV\",\"dialogsItems\":\"Dialogs_dialogsItems__3jZM7\",\"active\":\"Dialogs_active__2DQN8\"};","import React, {ChangeEvent} from 'react'\r\nimport s from './Dialogs.module.css'\r\n\r\nimport {dialogsPageType} from \"../../redux/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport { Button } from '@material-ui/core';\r\n\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: dialogsPageType\r\n    addMessage: () => void\r\n    newTextChangeHandler: (body: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    let dialogPage = props.dialogsPage\r\n    let NewTextMessage = dialogPage.NewTextMessage\r\n    let addMessage = () => {\r\n        props.addMessage()\r\n    }\r\n    const newTextChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value\r\n        props.newTextChangeHandler(body)\r\n    }\r\n\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>\r\n    return (\r\n\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogPage.dialogs.map(d => <div>{d.name}</div>)}\r\n            </div>\r\n            <div className={s.message}>\r\n                <textarea placeholder={\"Enter anything\"} value={NewTextMessage}\r\n                          onChange={newTextChangeHandler}/>\r\n                <Button color={'primary'} style={{background:'white'}} onClick={addMessage}>new post</Button>\r\n                <div >\r\n                    {\r\n                        dialogPage.messages.map(m => <li>{m.message}</li>)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n","\r\nimport {addMessageAC, updateMessageAC} from \"../../redux/dialogReducer\";\r\n\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReduxState} from \"../../redux/redux-store\";\r\nimport {dialogsPageType} from \"../../redux/store\";\r\nimport {withAuthRedirect} from \"../../RedirectHOC\";\r\nimport {compose} from 'redux';\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: dialogsPageType\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addMessage: () => void\r\n    newTextChangeHandler: (body: string) => void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: RootReduxState): mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any): mapDispatchToPropsType => {\r\n    return {\r\n        addMessage: () => {\r\n            dispatch(addMessageAC())\r\n        },\r\n        newTextChangeHandler: (body: string) => {\r\n            dispatch(updateMessageAC(body))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose(withAuthRedirect, connect<mapStateToPropsType, mapDispatchToPropsType, {}, RootReduxState>(mapStateToProps, mapDispatchToProps))(Dialogs)\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}